#include <iostream>  // Подключение библиотеки для ввода-вывода.
#include <vector>  // Подключение библиотеки для использования векторов.

const int boardSize = 5;  // Размер игрового поля.

void printBoard(const std::vector<std::vector<char>>& board) {  // Функция для печати игрового поля.
    for (int i = 0; i < boardSize; ++i) {  // Цикл для обхода строк игрового поля.
        for (int j = 0; j < boardSize; ++j) {  // Цикл для обхода столбцов игрового поля.
            std::cout << board[i][j] << " ";  // Вывод символа из игрового поля и пробела.
        }
        std::cout << std::endl;  // Переход на новую строку.
    }
}

bool isValidMove(int row, int col) {  // Функция для проверки допустимости хода.
    return row >= 0 && row < boardSize && col >= 0 && col < boardSize;  // Проверка, находятся ли координаты в пределах игрового поля.
}

int main() {
    setlocale(LC_ALL, "Russian");  // Установка локали для вывода сообщений на русском языке.
    std::vector<std::vector<char>> board(boardSize, std::vector<char>(boardSize, '-'));  // Создание и инициализация игрового поля.

    // Расположение корабля.
    int shipRow = 2;  // Строка, в которой находится корабль.
    int shipCol = 3;  // Столбец, в котором находится корабль.
    board[shipRow][shipCol] = 'S';  // Установка символа корабля в соответствующую позицию на игровом поле.

    int attempts = 0;  // Количество попыток.
    int hitCount = 0;  // Количество попаданий.

    std::cout << "Добро пожаловать в игру Морской бой!" << std::endl;  // Вывод приветствия.
    std::cout << "Попытайтесь потопить корабль." << std::endl;  // Вывод инструкций.

    while (hitCount < 1) {  // Цикл, выполняющийся до тех пор, пока корабль не будет потоплен.
        int guessRow, guessCol;  // Переменные для ввода координат выстрела.
        std::cout << "Введите номер строки (0-" << boardSize - 1 << "): ";  // Вывод запроса на ввод строки.
        std::cin >> guessRow;  // Чтение введенной строки.
        std::cout << "Введите номер столбца (0-" << boardSize - 1 << "): ";  // Вывод запроса на ввод столбца.
        std::cin >> guessCol;  // Чтение введенного столбца.

        if (!isValidMove(guessRow, guessCol)) {  // Проверка допустимости введенных координат.
            std::cout << "Недопустимые координаты!" << std::endl;  // Вывод сообщения об ошибке.
            continue;  // Пропуск текущей итерации цикла.
        }

        ++attempts;  // Увеличение счетчика попыток.

        if (guessRow == shipRow && guessCol == shipCol) {  // Проверка попадания в корабль.
            std::cout << "Поздравляем! Вы потопили корабль!" << std::endl;  // Вывод сообщения о потоплении корабля.
            board[guessRow][guessCol] = 'X';  // Установка символа попадания в соответствующую позицию на игровом поле.
            ++hitCount;  // Увеличение счетчика попаданий.
        } else {
            std::cout << "Мимо!" << std::endl;  // Вывод сообщения о промахе.
            board[guessRow][guessCol] = 'O';  // Установка символа промаха в соответствующую позицию на игровом поле.
        }

        printBoard(board);  // Вывод обновленного игрового поля.
    }

    std::cout << "Вы потопили корабль за " << attempts << " попыток." << std::endl;  // Вывод количества попыток.

    return 0;  // Возврат из функции main.
}
